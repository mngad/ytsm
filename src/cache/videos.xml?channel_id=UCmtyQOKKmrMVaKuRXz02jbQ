<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns:yt="http://www.youtube.com/xml/schemas/2015" xmlns:media="http://search.yahoo.com/mrss/" xmlns="http://www.w3.org/2005/Atom">
 <link rel="self" href="http://www.youtube.com/feeds/videos.xml?channel_id=UCmtyQOKKmrMVaKuRXz02jbQ"/>
 <id>yt:channel:UCmtyQOKKmrMVaKuRXz02jbQ</id>
 <yt:channelId>UCmtyQOKKmrMVaKuRXz02jbQ</yt:channelId>
 <title>Sebastian Lague</title>
 <link rel="alternate" href="https://www.youtube.com/channel/UCmtyQOKKmrMVaKuRXz02jbQ"/>
 <author>
  <name>Sebastian Lague</name>
  <uri>https://www.youtube.com/channel/UCmtyQOKKmrMVaKuRXz02jbQ</uri>
 </author>
 <published>2011-10-01T11:04:26+00:00</published>
 <entry>
  <id>yt:video:r_It_X7v-1E</id>
  <yt:videoId>r_It_X7v-1E</yt:videoId>
  <yt:channelId>UCmtyQOKKmrMVaKuRXz02jbQ</yt:channelId>
  <title>Coding Adventure: Simulating an Ecosystem</title>
  <link rel="alternate" href="https://www.youtube.com/watch?v=r_It_X7v-1E"/>
  <author>
   <name>Sebastian Lague</name>
   <uri>https://www.youtube.com/channel/UCmtyQOKKmrMVaKuRXz02jbQ</uri>
  </author>
  <published>2019-06-10T11:11:52+00:00</published>
  <updated>2019-06-14T16:37:50+00:00</updated>
  <media:group>
   <media:title>Coding Adventure: Simulating an Ecosystem</media:title>
   <media:content url="https://www.youtube.com/v/r_It_X7v-1E?version=3" type="application/x-shockwave-flash" width="640" height="390"/>
   <media:thumbnail url="https://i3.ytimg.com/vi/r_It_X7v-1E/hqdefault.jpg" width="480" height="360"/>
   <media:description>In this coding adventure I attempt to simulate a simple ecosystem. Will the foxes and rabbits get along? Probably not...

f you'd like to support the creation of more programming videos like this, please consider becoming a patron here:
https://www.patreon.com/SebastianLague

This video was inspired by Primer's series on evolution. I highly recommend taking a look!
https://youtu.be/0ZGbIKd0XrM
As many in the comments have said, if you enjoy this, you may want to check out equilinox, which is an entire game based around creating an ecosystem. Itâ€™s awesome. https://youtu.be/lHHpMn2UK6s

Source code:
Coming soon..

Music from https://filmmusic.io:
&quot;Inspired&quot;, &quot;Deadly Roulette&quot;, and &quot;Le Grande Chase&quot; by Kevin MacLeod (https://incompetech.com)
Licence: CC BY (http://creativecommons.org/licenses/by/4.0/)</media:description>
   <media:community>
    <media:starRating count="8933" average="4.99" min="1" max="5"/>
    <media:statistics views="90600"/>
   </media:community>
  </media:group>
 </entry>
 <entry>
  <id>yt:video:M3iI2l0ltbE</id>
  <yt:videoId>M3iI2l0ltbE</yt:videoId>
  <yt:channelId>UCmtyQOKKmrMVaKuRXz02jbQ</yt:channelId>
  <title>Coding Adventure: Marching Cubes</title>
  <link rel="alternate" href="https://www.youtube.com/watch?v=M3iI2l0ltbE"/>
  <author>
   <name>Sebastian Lague</name>
   <uri>https://www.youtube.com/channel/UCmtyQOKKmrMVaKuRXz02jbQ</uri>
  </author>
  <published>2019-05-06T08:46:02+00:00</published>
  <updated>2019-05-20T16:20:54+00:00</updated>
  <media:group>
   <media:title>Coding Adventure: Marching Cubes</media:title>
   <media:content url="https://www.youtube.com/v/M3iI2l0ltbE?version=3" type="application/x-shockwave-flash" width="640" height="390"/>
   <media:thumbnail url="https://i2.ytimg.com/vi/M3iI2l0ltbE/hqdefault.jpg" width="480" height="360"/>
   <media:description>In this coding adventure I try to understand marching cubes, and then use it to construct an endless underwater world.

If you'd like to support this channel, please consider becoming a patron here:
https://www.patreon.com/SebastianLague

Project files:
https://github.com/SebLague/Marching-Cubes

Learning resources:
http://paulbourke.net/geometry/polygonise/
https://developer.nvidia.com/gpugems/GPUGems3/gpugems3_ch01.html
https://people.eecs.berkeley.edu/~jrs/meshpapers/LorensenCline.pdf

Music from https://filmmusic.io:
&quot;Hiding Your Reality&quot; and &quot;Floating Cities&quot; by Kevin MacLeod (https://incompetech.com)
Licence: CC BY (http://creativecommons.org/licenses/by/4.0/)</media:description>
   <media:community>
    <media:starRating count="10091" average="4.99" min="1" max="5"/>
    <media:statistics views="114535"/>
   </media:community>
  </media:group>
 </entry>
 <entry>
  <id>yt:video:Cp5WWtMoeKg</id>
  <yt:videoId>Cp5WWtMoeKg</yt:videoId>
  <yt:channelId>UCmtyQOKKmrMVaKuRXz02jbQ</yt:channelId>
  <title>Coding Adventure: Ray Marching</title>
  <link rel="alternate" href="https://www.youtube.com/watch?v=Cp5WWtMoeKg"/>
  <author>
   <name>Sebastian Lague</name>
   <uri>https://www.youtube.com/channel/UCmtyQOKKmrMVaKuRXz02jbQ</uri>
  </author>
  <published>2019-04-02T08:22:58+00:00</published>
  <updated>2019-05-20T16:06:27+00:00</updated>
  <media:group>
   <media:title>Coding Adventure: Ray Marching</media:title>
   <media:content url="https://www.youtube.com/v/Cp5WWtMoeKg?version=3" type="application/x-shockwave-flash" width="640" height="390"/>
   <media:thumbnail url="https://i4.ytimg.com/vi/Cp5WWtMoeKg/hqdefault.jpg" width="480" height="360"/>
   <media:description>In this coding adventure I explore ray marching and signed distance functions to draw funky things!

If you're enjoying these videos and would like to support me in creating more, you can become a patron here:
https://www.patreon.com/SebastianLague

Project files:
https://github.com/SebLague/Ray-Marching

Learning resources:
http://iquilezles.org/www/articles/distfunctions/distfunctions.htm
http://jamie-wong.com/2016/07/15/ray-marching-signed-distance-functions/#the-raymarching-algorithm
https://www.iquilezles.org/www/articles/smin/smin.htm
http://blog.hvidtfeldts.net/index.php/2011/09/distance-estimated-3d-fractals-v-the-mandelbulb-different-de-approximations/

A little bonus visualization:
https://www.youtube.com/watch?v=0J8tKGjEE5Q

Music from https://filmmusic.io:
&quot;Supernatural&quot; and &quot;Hiding Your Reality&quot; by Kevin MacLeod (https://incompetech.com)
Licence: CC BY (http://creativecommons.org/licenses/by/4.0/)</media:description>
   <media:community>
    <media:starRating count="9662" average="4.99" min="1" max="5"/>
    <media:statistics views="123051"/>
   </media:community>
  </media:group>
 </entry>
 <entry>
  <id>yt:video:9RHGLZLUuwc</id>
  <yt:videoId>9RHGLZLUuwc</yt:videoId>
  <yt:channelId>UCmtyQOKKmrMVaKuRXz02jbQ</yt:channelId>
  <title>Coding Adventure: Compute Shaders</title>
  <link rel="alternate" href="https://www.youtube.com/watch?v=9RHGLZLUuwc"/>
  <author>
   <name>Sebastian Lague</name>
   <uri>https://www.youtube.com/channel/UCmtyQOKKmrMVaKuRXz02jbQ</uri>
  </author>
  <published>2019-03-14T17:49:45+00:00</published>
  <updated>2019-05-17T12:25:40+00:00</updated>
  <media:group>
   <media:title>Coding Adventure: Compute Shaders</media:title>
   <media:content url="https://www.youtube.com/v/9RHGLZLUuwc?version=3" type="application/x-shockwave-flash" width="640" height="390"/>
   <media:thumbnail url="https://i2.ytimg.com/vi/9RHGLZLUuwc/hqdefault.jpg" width="480" height="360"/>
   <media:description>In this coding adventure I learn about compute shaders by creating a very simple raytracer. I then try use what I've learned to speed up my erosion simulation from the previous episode.

If you're enjoying these videos and would like to support me in creating more, you can become a patron here:
https://www.patreon.com/SebastianLague

The project is available here:
(updated version) https://github.com/SebLague/Hydraulic-Erosion
(version at time of this video) https://github.com/SebLague/Hydraulic-Erosion/tree/Coding-Adventure-E02

Raytracing article:
http://blog.three-eyed-games.com/2018/05/03/gpu-ray-tracing-in-unity-part-1/

Compute shader resources I used:
https://www.reddit.com/r/Unity3D/comments/7ppldz/physics_simulation_on_gpu_with_compute_shader_in/
http://kylehalladay.com/blog/tutorial/2014/06/27/Compute-Shaders-Are-Nifty.html
https://docs.unity3d.com/Manual/class-ComputeShader.html

Music:
&quot;Le Grand Chase&quot;
Kevin MacLeod (incompetech.com)
Licensed under Creative Commons: By Attribution 3.0
http://creativecommons.org/licenses/by/3.0/</media:description>
   <media:community>
    <media:starRating count="4736" average="4.98" min="1" max="5"/>
    <media:statistics views="80922"/>
   </media:community>
  </media:group>
 </entry>
 <entry>
  <id>yt:video:eaXk97ujbPQ</id>
  <yt:videoId>eaXk97ujbPQ</yt:videoId>
  <yt:channelId>UCmtyQOKKmrMVaKuRXz02jbQ</yt:channelId>
  <title>Coding Adventure: Hydraulic Erosion</title>
  <link rel="alternate" href="https://www.youtube.com/watch?v=eaXk97ujbPQ"/>
  <author>
   <name>Sebastian Lague</name>
   <uri>https://www.youtube.com/channel/UCmtyQOKKmrMVaKuRXz02jbQ</uri>
  </author>
  <published>2019-02-28T06:27:55+00:00</published>
  <updated>2019-05-17T19:00:17+00:00</updated>
  <media:group>
   <media:title>Coding Adventure: Hydraulic Erosion</media:title>
   <media:content url="https://www.youtube.com/v/eaXk97ujbPQ?version=3" type="application/x-shockwave-flash" width="640" height="390"/>
   <media:thumbnail url="https://i2.ytimg.com/vi/eaXk97ujbPQ/hqdefault.jpg" width="480" height="360"/>
   <media:description>In this coding adventure I attempt to implement a simulation of hydraulic erosion to make a procedural terrain look more natural.

If you're enjoying these videos and would like to support me in creating more of them, I have a patreon page here: https://www.patreon.com/SebastianLague

Full playlist here: https://www.youtube.com/playlist?list=PLFt_AvWsXl0ehjAfLFsp1PGaatzAwo0uK

The project is available here:
(updated version) https://github.com/SebLague/Hydraulic-Erosion
(version at time of this video) https://github.com/SebLague/Hydraulic-Erosion/tree/Coding-Adventure-E01

Resources:
https://www.firespark.de/resources/downloads/implementation%20of%20a%20methode%20for%20hydraulic%20erosion.pdf
http://ranmantaru.com/blog/2011/10/08/water-erosion-on-heightmap-terrain/</media:description>
   <media:community>
    <media:starRating count="11584" average="4.99" min="1" max="5"/>
    <media:statistics views="138966"/>
   </media:community>
  </media:group>
 </entry>
 <entry>
  <id>yt:video:saAQNRSYU9k</id>
  <yt:videoId>saAQNRSYU9k</yt:videoId>
  <yt:channelId>UCmtyQOKKmrMVaKuRXz02jbQ</yt:channelId>
  <title>Path Creator (free unity tool)</title>
  <link rel="alternate" href="https://www.youtube.com/watch?v=saAQNRSYU9k"/>
  <author>
   <name>Sebastian Lague</name>
   <uri>https://www.youtube.com/channel/UCmtyQOKKmrMVaKuRXz02jbQ</uri>
  </author>
  <published>2019-01-26T12:07:47+00:00</published>
  <updated>2019-06-12T19:21:48+00:00</updated>
  <media:group>
   <media:title>Path Creator (free unity tool)</media:title>
   <media:content url="https://www.youtube.com/v/saAQNRSYU9k?version=3" type="application/x-shockwave-flash" width="640" height="390"/>
   <media:thumbnail url="https://i4.ytimg.com/vi/saAQNRSYU9k/hqdefault.jpg" width="480" height="360"/>
   <media:description>This is a little tool I made to help with creating paths in Unity.
You can get it from the asset store: https://assetstore.unity.com/packages/tools/utilities/b-zier-path-creator-136082
Or from github (updated more frequently): https://github.com/SebLague/Path-Creator

As a starting point, I used the path editor from my old tutorial series, which you can watch here: https://youtu.be/RF04Fi9OCPc

Support the creation of more gamedev videos:
https://www.patreon.com/SebastianLague</media:description>
   <media:community>
    <media:starRating count="2126" average="4.99" min="1" max="5"/>
    <media:statistics views="38014"/>
   </media:community>
  </media:group>
 </entry>
 <entry>
  <id>yt:video:MoQ5OapRI2c</id>
  <yt:videoId>MoQ5OapRI2c</yt:videoId>
  <yt:channelId>UCmtyQOKKmrMVaKuRXz02jbQ</yt:channelId>
  <title>[Ludum Dare #43] The Resistance: Behind the Scenes</title>
  <link rel="alternate" href="https://www.youtube.com/watch?v=MoQ5OapRI2c"/>
  <author>
   <name>Sebastian Lague</name>
   <uri>https://www.youtube.com/channel/UCmtyQOKKmrMVaKuRXz02jbQ</uri>
  </author>
  <published>2018-12-04T13:21:56+00:00</published>
  <updated>2019-06-16T22:25:53+00:00</updated>
  <media:group>
   <media:title>[Ludum Dare #43] The Resistance: Behind the Scenes</media:title>
   <media:content url="https://www.youtube.com/v/MoQ5OapRI2c?version=3" type="application/x-shockwave-flash" width="640" height="390"/>
   <media:thumbnail url="https://i2.ytimg.com/vi/MoQ5OapRI2c/hqdefault.jpg" width="480" height="360"/>
   <media:description>A game about batteries. Made in 48 hours for the Ludum Dare 43 game jam.
https://ldjam.com/events/ludum-dare/43/the-resistance

Support the creation of more tutorials and get early access to new videos: https://www.patreon.com/SebastianLague</media:description>
   <media:community>
    <media:starRating count="1332" average="4.98" min="1" max="5"/>
    <media:statistics views="22656"/>
   </media:community>
  </media:group>
 </entry>
 <entry>
  <id>yt:video:7WcmyxyFO7o</id>
  <yt:videoId>7WcmyxyFO7o</yt:videoId>
  <yt:channelId>UCmtyQOKKmrMVaKuRXz02jbQ</yt:channelId>
  <title>[Unity] Procedural Object Placement (E01: poisson disc sampling)</title>
  <link rel="alternate" href="https://www.youtube.com/watch?v=7WcmyxyFO7o"/>
  <author>
   <name>Sebastian Lague</name>
   <uri>https://www.youtube.com/channel/UCmtyQOKKmrMVaKuRXz02jbQ</uri>
  </author>
  <published>2018-11-23T09:40:15+00:00</published>
  <updated>2019-06-16T22:16:50+00:00</updated>
  <media:group>
   <media:title>[Unity] Procedural Object Placement (E01: poisson disc sampling)</media:title>
   <media:content url="https://www.youtube.com/v/7WcmyxyFO7o?version=3" type="application/x-shockwave-flash" width="640" height="390"/>
   <media:thumbnail url="https://i4.ytimg.com/vi/7WcmyxyFO7o/hqdefault.jpg" width="480" height="360"/>
   <media:description>In this video we look at implementing poisson disc sampling, an algorithm for generating tightly-packed points which are all some minimum distance from one another. This implementation is based on the paper here: https://www.cs.ubc.ca/~rbridson/docs/bridson-siggraph07-poissondisk.pdf

Source code: https://github.com/SebLague/Poisson-Disc-Sampling

Support the creation of more tutorials and get early access to new videos: https://www.patreon.com/SebastianLague</media:description>
   <media:community>
    <media:starRating count="1109" average="4.97" min="1" max="5"/>
    <media:statistics views="23907"/>
   </media:community>
  </media:group>
 </entry>
 <entry>
  <id>yt:video:OULxvDLojic</id>
  <yt:videoId>OULxvDLojic</yt:videoId>
  <yt:channelId>UCmtyQOKKmrMVaKuRXz02jbQ</yt:channelId>
  <title>[Unity] Procedural Planets (E07: ocean depth)</title>
  <link rel="alternate" href="https://www.youtube.com/watch?v=OULxvDLojic"/>
  <author>
   <name>Sebastian Lague</name>
   <uri>https://www.youtube.com/channel/UCmtyQOKKmrMVaKuRXz02jbQ</uri>
  </author>
  <published>2018-10-31T09:52:57+00:00</published>
  <updated>2019-06-12T19:25:35+00:00</updated>
  <media:group>
   <media:title>[Unity] Procedural Planets (E07: ocean depth)</media:title>
   <media:content url="https://www.youtube.com/v/OULxvDLojic?version=3" type="application/x-shockwave-flash" width="640" height="390"/>
   <media:thumbnail url="https://i4.ytimg.com/vi/OULxvDLojic/hqdefault.jpg" width="480" height="360"/>
   <media:description>In this episode we make the oceans more interesting by shading them according to their depth.
Get the project files for this episode:
http://github.com/SebLague/Procedural-Planets

Support the creation of more tutorials and get early access to new videos: https://www.patreon.com/SebastianLague</media:description>
   <media:community>
    <media:starRating count="711" average="4.99" min="1" max="5"/>
    <media:statistics views="25233"/>
   </media:community>
  </media:group>
 </entry>
 <entry>
  <id>yt:video:Nxr0z6zKhOI</id>
  <yt:videoId>Nxr0z6zKhOI</yt:videoId>
  <yt:channelId>UCmtyQOKKmrMVaKuRXz02jbQ</yt:channelId>
  <title>[Unity] Procedural Planets (E06: simple biomes)</title>
  <link rel="alternate" href="https://www.youtube.com/watch?v=Nxr0z6zKhOI"/>
  <author>
   <name>Sebastian Lague</name>
   <uri>https://www.youtube.com/channel/UCmtyQOKKmrMVaKuRXz02jbQ</uri>
  </author>
  <published>2018-10-23T02:12:24+00:00</published>
  <updated>2019-06-12T19:39:40+00:00</updated>
  <media:group>
   <media:title>[Unity] Procedural Planets (E06: simple biomes)</media:title>
   <media:content url="https://www.youtube.com/v/Nxr0z6zKhOI?version=3" type="application/x-shockwave-flash" width="640" height="390"/>
   <media:thumbnail url="https://i3.ytimg.com/vi/Nxr0z6zKhOI/hqdefault.jpg" width="480" height="360"/>
   <media:description>In this episode we add simple colour biomes to the planet.

Get the project files for this episode:
http://github.com/SebLague/Procedural-Planets

Note:
Two issues have been pointed out which I'd like to address: (will add these fixes at end of next video)
1) changing resolution causes uv out of bounds error. This can be fixed by checking mesh.uv.Length == uv.Length before assigning the uvs in ConstructMesh method.
2) biome colours appearing in wrong places when zoomed out (on certain devices). To fix this, mipmaps need to be disabled on the planet texture. In the ColourGenerator, replace with:
texture = new Texture2D(textureResolution, settings.biomeColourSettings.biomes.Length, TextureFormat.RGBA32, false);ï»¿

Support the creation of more tutorials and get early access to new videos: https://www.patreon.com/SebastianLague</media:description>
   <media:community>
    <media:starRating count="542" average="4.98" min="1" max="5"/>
    <media:statistics views="19655"/>
   </media:community>
  </media:group>
 </entry>
 <entry>
  <id>yt:video:itnLOlQ2QFo</id>
  <yt:videoId>itnLOlQ2QFo</yt:videoId>
  <yt:channelId>UCmtyQOKKmrMVaKuRXz02jbQ</yt:channelId>
  <title>[Unity] Procedural Planets (E05: shader)</title>
  <link rel="alternate" href="https://www.youtube.com/watch?v=itnLOlQ2QFo"/>
  <author>
   <name>Sebastian Lague</name>
   <uri>https://www.youtube.com/channel/UCmtyQOKKmrMVaKuRXz02jbQ</uri>
  </author>
  <published>2018-09-14T15:29:25+00:00</published>
  <updated>2019-06-12T19:22:32+00:00</updated>
  <media:group>
   <media:title>[Unity] Procedural Planets (E05: shader)</media:title>
   <media:content url="https://www.youtube.com/v/itnLOlQ2QFo?version=3" type="application/x-shockwave-flash" width="640" height="390"/>
   <media:thumbnail url="https://i2.ytimg.com/vi/itnLOlQ2QFo/hqdefault.jpg" width="480" height="360"/>
   <media:description>In this episode we use shadergraph to create a simple shader for our planet.

Get the project files for this episode:
http://github.com/SebLague/Procedural-Planets

Support the creation of more tutorials and get early access to new videos: https://www.patreon.com/SebastianLague</media:description>
   <media:community>
    <media:starRating count="778" average="4.96" min="1" max="5"/>
    <media:statistics views="29128"/>
   </media:community>
  </media:group>
 </entry>
 <entry>
  <id>yt:video:H4g-TC__cvg</id>
  <yt:videoId>H4g-TC__cvg</yt:videoId>
  <yt:channelId>UCmtyQOKKmrMVaKuRXz02jbQ</yt:channelId>
  <title>[Unity] Procedural Planets (E04: multiple noise filters)</title>
  <link rel="alternate" href="https://www.youtube.com/watch?v=H4g-TC__cvg"/>
  <author>
   <name>Sebastian Lague</name>
   <uri>https://www.youtube.com/channel/UCmtyQOKKmrMVaKuRXz02jbQ</uri>
  </author>
  <published>2018-09-07T18:08:36+00:00</published>
  <updated>2019-06-12T19:44:05+00:00</updated>
  <media:group>
   <media:title>[Unity] Procedural Planets (E04: multiple noise filters)</media:title>
   <media:content url="https://www.youtube.com/v/H4g-TC__cvg?version=3" type="application/x-shockwave-flash" width="640" height="390"/>
   <media:thumbnail url="https://i1.ytimg.com/vi/H4g-TC__cvg/hqdefault.jpg" width="480" height="360"/>
   <media:description>In this episode we'll add support for having multiple noise filters, and create a new noise filter for producing ridge-like terrain.

Get the project files for this episode:
http://github.com/SebLague/Procedural-Planets

Editor scripts:
https://github.com/SebLague/Procedural-Planets/tree/master/Procedural%20Planet%20Hide%20Editor

Support the creation of more tutorials and get early access to new videos: https://www.patreon.com/SebastianLague</media:description>
   <media:community>
    <media:starRating count="801" average="4.98" min="1" max="5"/>
    <media:statistics views="27568"/>
   </media:community>
  </media:group>
 </entry>
 <entry>
  <id>yt:video:uY9PAcNMu8s</id>
  <yt:videoId>uY9PAcNMu8s</yt:videoId>
  <yt:channelId>UCmtyQOKKmrMVaKuRXz02jbQ</yt:channelId>
  <title>[Unity] Procedural Planets (E03: layered noise)</title>
  <link rel="alternate" href="https://www.youtube.com/watch?v=uY9PAcNMu8s"/>
  <author>
   <name>Sebastian Lague</name>
   <uri>https://www.youtube.com/channel/UCmtyQOKKmrMVaKuRXz02jbQ</uri>
  </author>
  <published>2018-08-30T07:27:19+00:00</published>
  <updated>2019-06-12T19:25:45+00:00</updated>
  <media:group>
   <media:title>[Unity] Procedural Planets (E03: layered noise)</media:title>
   <media:content url="https://www.youtube.com/v/uY9PAcNMu8s?version=3" type="application/x-shockwave-flash" width="640" height="390"/>
   <media:thumbnail url="https://i2.ytimg.com/vi/uY9PAcNMu8s/hqdefault.jpg" width="480" height="360"/>
   <media:description>In this episode we'll create a noise filter to process noise, and layer it for more interesting terrain. Episode 04 is out for early access viewers here: https://www.patreon.com/posts/21079771

Noise script:
https://github.com/SebLague/Procedural-Planets/blob/master/Procedural%20Planet%20Noise/Noise.cs

Get the project files for this episode:
http://github.com/SebLague/Procedural-Planets

Support the creation of more tutorials and get early access to new videos: https://www.patreon.com/SebastianLague</media:description>
   <media:community>
    <media:starRating count="1088" average="4.97" min="1" max="5"/>
    <media:statistics views="33725"/>
   </media:community>
  </media:group>
 </entry>
 <entry>
  <id>yt:video:LyV7cEQyZMk</id>
  <yt:videoId>LyV7cEQyZMk</yt:videoId>
  <yt:channelId>UCmtyQOKKmrMVaKuRXz02jbQ</yt:channelId>
  <title>[Unity] Procedural Planets (E02 settings editor)</title>
  <link rel="alternate" href="https://www.youtube.com/watch?v=LyV7cEQyZMk"/>
  <author>
   <name>Sebastian Lague</name>
   <uri>https://www.youtube.com/channel/UCmtyQOKKmrMVaKuRXz02jbQ</uri>
  </author>
  <published>2018-08-23T12:45:36+00:00</published>
  <updated>2019-06-13T21:42:15+00:00</updated>
  <media:group>
   <media:title>[Unity] Procedural Planets (E02 settings editor)</media:title>
   <media:content url="https://www.youtube.com/v/LyV7cEQyZMk?version=3" type="application/x-shockwave-flash" width="640" height="390"/>
   <media:thumbnail url="https://i1.ytimg.com/vi/LyV7cEQyZMk/hqdefault.jpg" width="480" height="360"/>
   <media:description>In this episode we'll be creating a custom settings inspector for the planet.

Get the project files for this episode:
http://github.com/SebLague/Procedural-Planets

Support the creation of more tutorials and get early access to new videos: https://www.patreon.com/SebastianLague</media:description>
   <media:community>
    <media:starRating count="979" average="4.99" min="1" max="5"/>
    <media:statistics views="38489"/>
   </media:community>
  </media:group>
 </entry>
 <entry>
  <id>yt:video:QN39W020LqU</id>
  <yt:videoId>QN39W020LqU</yt:videoId>
  <yt:channelId>UCmtyQOKKmrMVaKuRXz02jbQ</yt:channelId>
  <title>[Unity] Procedural Planets (E01 the sphere)</title>
  <link rel="alternate" href="https://www.youtube.com/watch?v=QN39W020LqU"/>
  <author>
   <name>Sebastian Lague</name>
   <uri>https://www.youtube.com/channel/UCmtyQOKKmrMVaKuRXz02jbQ</uri>
  </author>
  <published>2018-08-16T23:07:03+00:00</published>
  <updated>2019-06-12T19:33:01+00:00</updated>
  <media:group>
   <media:title>[Unity] Procedural Planets (E01 the sphere)</media:title>
   <media:content url="https://www.youtube.com/v/QN39W020LqU?version=3" type="application/x-shockwave-flash" width="640" height="390"/>
   <media:thumbnail url="https://i2.ytimg.com/vi/QN39W020LqU/hqdefault.jpg" width="480" height="360"/>
   <media:description>In this series we'll be creating a system for procedurally generating simple, but diverse planets.

Get the project files for this episode:
http://github.com/SebLague/Procedural-Planets

Please note that this series will not be covering level of detail or collisions, the goal is simply to generate some interesting-looking planets.

Support the creation of more tutorials and get early access to new videos: https://www.patreon.com/SebastianLague</media:description>
   <media:community>
    <media:starRating count="3154" average="4.97" min="1" max="5"/>
    <media:statistics views="103363"/>
   </media:community>
  </media:group>
 </entry>
</feed>
